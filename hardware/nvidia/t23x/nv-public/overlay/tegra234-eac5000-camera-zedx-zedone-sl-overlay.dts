/*
 * Copyright (c) 2018-2022, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/dts-v1/;
/plugin/;

#include "tegra234-camera-zedx-zedxone-zedxoneuhd-eac5000-agx.dtsi"

#include "dt-bindings/clock/tegra234-clock.h"
//#include <dt-bindings/tegra234-p3767-0000-common.h>

//#include "tegra234-camera-zedlink-quad-p3737-agx.dtsi"
#include "dt-bindings/gpio/tegra234-gpio.h"
#include <dt-bindings/tegra234-p3737-0000+p3701-0000.h>

#define CAM0_RST	TEGRA234_MAIN_GPIO(H, 3)
#define CAM1_RST	TEGRA234_MAIN_GPIO(AC, 1)

#define CAM0_PWDN	TEGRA234_MAIN_GPIO(H, 6)
#define CAM1_PWDN	TEGRA234_MAIN_GPIO(AC, 0)
#define CAM2_PWDN	TEGRA234_MAIN_GPIO(H, 3)
#define CAM3_PWDN	TEGRA234_MAIN_GPIO(AC, 1)
#define CAM_PWM		TEGRA234_MAIN_GPIO(M, 7)
#define CAMERA_I2C_MUX_BUS(x) (0x1E + x)


/* camera control gpio definitions */

/*/delete-node/ &cam_i2cmux;*/

/ {	
	overlay-name = "EAC5000 StereoLabs Camera ZED Device Tree Overlay";
	jetson-header-name = "Jetson AGX CSI Connector";
	compatible = JETSON_COMPATIBLE;

	fragment-camera-imx185@0 {
		target-path = "/";
		__overlay__ {
			bus@0 {
				gpio@2200000 {
					camera-control-output-low {
						status = "disabled";
					};
				};
			};
		};
	};
	fragment-camera-imx274@0 {
		target-path = "/";
		__overlay__ {
			bus@0 {
				gpio@2200000 {
					camera-control-output-low {
						status = "disabled";
					};
				};
			};
		};
	};
	/* E3333 camera */
	fragment@0 {
		target-path = "/";
		__overlay__ {
			bus@0 {
				gpio@2200000 {
					camera-control-output-low {
						status = "disabled";
					};
				};
			};
		};
	};
	/* E3331 camera */
	fragment-camera@0 {
		target-path = "/";
		__overlay__ {
			bus@0 {
				gpio@2200000 {
					camera-control-output-low {
						status = "disabled";
					};
				};
			};
		};
	};
	fragment-camera-module@0 {
		target-path = "/";
		__overlay__ {
			bus@0 {
				gpio@2200000 {
					camera-control-output-low {
						status = "disabled";
					};
				};
			};
		};
	};
	fragment-camera-howl@0 {
		target-path = "/";
		__overlay__ {
			bus@0 {
				gpio@2200000 {
					camera-control-output-low {
						status = "disabled";
					};
				};
			};
		};
	};

	fragment-camera-vecow-zedx@0 {
		target-path = "/";
		__overlay__ {
			bus@0 {
				i2c@3180000 {
					tca9543@72 {
						compatible = "nxp,pca9543";
						reg = <0x72>;
						#address-cells = <1>;
						#size-cells = <0>;
						i2c-mux-idle-disconnect;
						idle-state = <1>;
						skip_mux_detect = "yes";
						status = "okay";
						force_bus_start = <CAMERA_I2C_MUX_BUS(0)>; /* Force start of bus 30 */
						/* /dev/i2c-30/ */
						i2c@0 {
							reg = <0>;
							i2c-mux,deselect-on-exit;
							#address-cells = <1>;
							#size-cells = <0>;
							status = "okay";
							/* deserializer MAX9296 at address 0x48*/

							max9296_a@48 {
								compatible = "stereolabs,sl_max9296";
								reg = <0x48>;  /* deserializer i2c_address */
								channel = "a"; /* deserializer channel: one per deser */
								camera-serializers = <&zedx_ser0 &zedxone_gs_ser0 &zedxone_uhd_ser0>;
								sync_mode = "master";
							};

							/* ZEDX 0 Left Cam*/
							zedx_left0:zedx_left_0@28 {
								status = "okay";
								/* Define any required hw resources needed by driver */
								/* ie. clocks, io pins, power sources */
								def-addr = <0x28>;
								clocks = <&bpmp TEGRA234_CLK_EXTPERIPH1>,
										<&bpmp TEGRA234_CLK_EXTPERIPH1>;
								clock-names = "extperiph1", "pllp_grtba";
								mclk = "extperiph1";
								channel = "a"; /* deserializer channel */
								zedx-id = "0";
								mode = "slave"; /* the master role is to initialize */
								/* all the serializers connected to the same */
								/* deserializer. -> one per ZEDX*/
								/* This master initializes the serializers */
								/* of ZEDX 0 and ZEDX 1. */
							};

							/* ZEDX 0 Right Cam*/
							zedx_right0:zedx_right_0@20 {
								status = "okay";
								/* Define any required hw resources needed by driver */
								/* ie. clocks, io pins, power sources */
								def-addr = <0x20>;
								clocks = <&bpmp TEGRA234_CLK_EXTPERIPH1>,
												<&bpmp TEGRA234_CLK_EXTPERIPH1>;
								clock-names = "extperiph1", "pllp_grtba";
								mclk = "extperiph1";
								channel = "a";  /* deserializer channel */
								zedx-id = "0";
								mode = "slave"; /* the serializer of the ZEDX 0 is already */
								/* initialized */
								eeprom-addr = <0x54>;
								has-eeprom;
							};
							
							/* ZEDX One GS 0 Cam*/
							zedxone_gs0:zedxone_gs_0@10 {
								status = "okay";
								/* Define any required hw resources needed by driver */
								/* ie. clocks, io pins, power sources */
								clocks = <&bpmp TEGRA234_CLK_EXTPERIPH1>,
										<&bpmp TEGRA234_CLK_EXTPERIPH1>;
								clock-names = "extperiph1", "pllp_grtba";
								mclk = "extperiph1";
								zedx-id = "1";
								channel = "a";   /* deserializer channel */
								mode = "slave"; /* the master role is to initialize */
										/* all the serializers connected to the same */
										/* deserializer. -> one per ZEDX*/
										/* This master initializes the serializers */
										/* of ZEDX 0 and ZEDX 1. */
								eeprom-addr = <0x56>;
								has-eeprom;
							};

							/*ZEDX One UHD 0 Cam*/
							zedxone_uhd0:zedxone_uhd_0@1a {
								/* Define any required hw resources needed by driver */
								/* ie. clocks, io pins, power sources */
								clocks = <&bpmp TEGRA234_CLK_EXTPERIPH1>,
										<&bpmp TEGRA234_CLK_EXTPERIPH1>;
								clock-names = "extperiph1", "pllp_grtba";
								mclk = "extperiph1";
								zedx-uhd-id = "0";
								channel = "a";
								mode = "slave";
								has-eeprom;
								eeprom-addr=<0x54>;
							};

							/* Serializers */
							zedxone_gs_ser0:zedxone_gs_ser_0@42 {
								compatible = "stereolabs,sl_max9295";
								channel = "a";
								camera_model = "zedonegs";
								mode = "master";
								zedx-id = "1";
								camera-sensors = <&zedxone_gs0>;
							};

							zedxone_uhd_ser0:zedxone_uhd_ser_0@44 {
								compatible = "stereolabs,sl_max9295";
								channel = "a";
								camera_model = "zedone4k";
								mode = "master";
								camera-sensors = <&zedxone_uhd0>;
								zedx-uhd-id = "0";
							};

							zedx_ser0:zedx_ser_0@62 {
								compatible = "stereolabs,sl_max9295";
								channel = "a";
								camera_model = "zedx";
								mode = "master";
								zedx-id = "0";
								camera-sensors = <&zedx_left0 &zedx_right0>;
							};
						};

						/* /dev/i2c-31/ */
						i2c@1 {

							reg = <1>;
							i2c-mux,deselect-on-exit;
							#address-cells = <1>;
							#size-cells = <0>;
							//status = "okay";

							/* deserializer MAX9296 at address 0x48*/
							max9296_b@48 {
								compatible = "stereolabs,sl_max9296";
								reg = <0x48>;  /* deserializer i2c_address */
								channel = "b"; /* deserializer channel: one per deser */
								camera-serializers = <&zedx_ser1 &zedxone_gs_ser1 &zedxone_uhd_ser1>;
							};

							/* ZEDX 1 Left Cam*/
							zedx_left1:zedx_left_1@28 {
								status = "okay";
								def-addr = <0x28>;
								/* Define any required hw resources needed by driver */
								/* ie. clocks, io pins, power sources */
								clocks = <&bpmp TEGRA234_CLK_EXTPERIPH1>,
										<&bpmp TEGRA234_CLK_EXTPERIPH1>;
								clock-names = "extperiph1", "pllp_grtba";
								mclk = "extperiph1";
								channel = "b";  /* deserializer channel: same as ZEDX 0 */
								zedx-id = "2";
								mode = "slave"; /* the serializer of the ZEDX 1 is */
										/* initialized at the same time as the*/
										/* serializer of the ZEDX 0 */
								eeprom-addr = <0x54>;
								has-eeprom;
							};

							/* ZEDX 1 Right Cam*/
							zedx_right1:zedx_right_1@20 {
								status = "okay";
								def-addr = <0x20>;
								/* Define any required hw resources needed by driver */
								/* ie. clocks, io pins, power sources */
								clocks = <&bpmp TEGRA234_CLK_EXTPERIPH1>,
												<&bpmp TEGRA234_CLK_EXTPERIPH1>;
								clock-names = "extperiph1", "pllp_grtba";
								mclk = "extperiph1";
								channel = "b"; /* deserializer channel: same as ZEDX 0 */
								zedx-id = "2";
								mode = "slave"; /* the serializer of the ZEDX 1 is */
										/* initialized at the same time as the*/
										/* serializer of the ZEDX 0 */
								eeprom-addr = <0x54>;
								has-eeprom;
							};

							/* ZEDX One GS 1 Cam*/
							zedxone_gs1: zedxone_gs_1@10 {
								status = "okay";
								/* Define any required hw resources needed by driver */
								/* ie. clocks, io pins, power sources */
								clocks = <&bpmp TEGRA234_CLK_EXTPERIPH1>,
										<&bpmp TEGRA234_CLK_EXTPERIPH1>;
								clock-names = "extperiph1", "pllp_grtba";
								mclk = "extperiph1";
								zedx-id = "3";
								channel = "b";   /* deserializer channel */
								mode = "slave"; /* the master role is to initialize */
										/* all the serializers connected to the same */
										/* deserializer. -> one per ZEDX*/
										/* This master initializes the serializers */
										/* of ZEDX 0 and ZEDX 1. */
								eeprom-addr = <0x56>;
								has-eeprom;
							};

							/*ZEDX One UHD 1 Cam*/
							zedxone_uhd1:zedxone_uhd_1@1a {
								/* Define any required hw resources needed by driver */
								/* ie. clocks, io pins, power sources */
								clocks = <&bpmp TEGRA234_CLK_EXTPERIPH1>,
										<&bpmp TEGRA234_CLK_EXTPERIPH1>;
								clock-names = "extperiph1", "pllp_grtba";
								mclk = "extperiph1";
								zedx-uhd-id = "1";
								channel = "b";
								mode = "slave";
								has-eeprom;
								eeprom-addr=<0x54>;
							};

							/* Serializers */
							zedxone_gs_ser1: zedxone_gs_ser_1@42 {
								compatible = "stereolabs,sl_max9295";
								channel = "b";
								mode = "master";
								camera_model = "zedonegs";
								zedx-id = "3";
								camera-sensors = <&zedxone_gs1>;
							};
				
							zedxone_uhd_ser1: zedxone_uhd_ser_1@44 {
								compatible = "stereolabs,sl_max9295";
								channel = "b";
								camera_model = "zedone4k";
								mode = "master";
								camera-sensors = <&zedxone_uhd1>;
								zedx-uhd-id = "1";
							};

							zedx_ser1:zedx_ser_1@62 {
								compatible = "stereolabs,sl_max9295";
								channel = "b";
								camera_model = "zedx";
								mode = "master";
								zedx-id = "2";
								camera-sensors = <&zedx_left1 &zedx_right1>;
							};
						};
					};
				};

				gpio@2200000 {
					status = "okay";
					camera-control-output-CAM0-high {
							status = "okay";
							gpio-hog;
							gpios = <CAM0_PWDN 0>;
							output-high;
							label = "cam0-pwdn";
					};
					camera-control-output-CAM1-high {
							status = "okay";
							gpio-hog;
							gpios = <CAM1_PWDN 0>;
							output-high;
							label = "cam1-pwdn";
					};
					camera-control-output-CAM2-high {
							status = "okay";
							gpio-hog;
							gpios = <CAM2_PWDN 0>;
							output-high;
							label = "cam2-pwdn";
					};
					camera-control-output-CAM3-high {
							status = "okay";
							gpio-hog;
							gpios = <CAM3_PWDN 0>;
							output-high;
							label = "cam3-pwdn";
					};
					camera-control-output-PWM-high {
							status = "okay";
							gpio-hog;
							gpios = <CAM_PWM 0>;
							output-high;
							label = "cam-pwm";
					};
				};
			};
		};
	};

	fragment-camera-vecow-zedx@1 {
		target-path = "/";
		__overlay__ {
			bus@0 {
				i2c@3180000 {
					tca9543@73 {
						compatible = "nxp,pca9543";
						reg = <0x73>;
						#address-cells = <1>;
						#size-cells = <0>;
						i2c-mux-idle-disconnect;
						idle-state = <1>;
						skip_mux_detect = "yes";
						status = "okay";
						force_bus_start = <CAMERA_I2C_MUX_BUS(2)>; /* Force start of bus 30 */
						i2c@0 {
							reg = <0>;
						    i2c-mux,deselect-on-exit;
							i2c-mux-idle-disconnect;
							#address-cells = <1>;
							#size-cells = <0>;
							//status = "okay";

							/* deserializer MAX9296 at address 0x48*/
							max9296_c@48 {
								compatible = "stereolabs,sl_max9296";
								reg = <0x48>;  /* deserializer i2c_address */
								channel = "c"; /* deserializer channel: one per deser */
								camera-serializers = <&zedx_ser2 &zedxone_gs_ser2 &zedxone_uhd_ser2>;
							};

							/* ZEDX 2 Left Cam*/
							zedx_left2:zedx_left_2@28 {
								status = "okay";
								def-addr = <0x28>;
								/* Define any required hw resources needed by driver */
								/* ie. clocks, io pins, power sources */
								clocks = <&bpmp TEGRA234_CLK_EXTPERIPH1>,
										<&bpmp TEGRA234_CLK_EXTPERIPH1>;
								clock-names = "extperiph1", "pllp_grtba";
								mclk = "extperiph1";
								channel = "c";   /* deserializer channel */
								zedx-id = "4";
								mode = "slave"; /* the master role is to initialize */
										/* all the serializers connected to the same */
										/* deserializer. -> one per ZEDX*/
										/* This master initializes the serializers */
										/* of ZEDX 0 and ZEDX 1. */
							};

							/* ZEDX 2 Right Cam*/
							zedx_right2:zedx_right_2@20 {
								status = "okay";
								def-addr = <0x20>;
								/* Define any required hw resources needed by driver */
								/* ie. clocks, io pins, power sources */
								clocks = <&bpmp TEGRA234_CLK_EXTPERIPH1>,
												<&bpmp TEGRA234_CLK_EXTPERIPH1>;
								clock-names = "extperiph1", "pllp_grtba";
								mclk = "extperiph1";
								zedx-id = "4";
								channel = "c";  /* deserializer channel */
								mode = "slave"; /* the serializer of the ZEDX 0 is already */
										/* initialized */
								eeprom-addr = <0x54>;
								has-eeprom;
							};

							/* ZEDX One GS 2 Cam*/
							zedxone_gs2: zedxone_gs_2@10 {
								status = "okay";
								/* Define any required hw resources needed by driver */
								/* ie. clocks, io pins, power sources */
								clocks = <&bpmp TEGRA234_CLK_EXTPERIPH1>,
										<&bpmp TEGRA234_CLK_EXTPERIPH1>;
								clock-names = "extperiph1", "pllp_grtba";
								mclk = "extperiph1";
								zedx-id = "5";
								channel = "c";   /* deserializer channel */
								mode = "slave"; /* the master role is to initialize */
										/* all the serializers connected to the same */
										/* deserializer. -> one per ZEDX*/
										/* This master initializes the serializers */
										/* of ZEDX 0 and ZEDX 1. */
								eeprom-addr = <0x56>;
								has-eeprom;
							};

							/*ZEDX One UHD 2 Cam*/
							zedxone_uhd2:zedxone_uhd_2@1a {
								/* Define any required hw resources needed by driver */
								/* ie. clocks, io pins, power sources */
								clocks = <&bpmp TEGRA234_CLK_EXTPERIPH1>,
										<&bpmp TEGRA234_CLK_EXTPERIPH1>;
								clock-names = "extperiph1", "pllp_grtba";
								mclk = "extperiph1";
								zedx-uhd-id = "2";
								channel = "c";
								mode = "slave";
								has-eeprom;
								eeprom-addr=<0x54>;
							};

							/* Serializers */
							zedxone_gs_ser2: zedxone_gs_ser_2@42 {
								compatible = "stereolabs,sl_max9295";
								channel = "c";
								mode = "master";
								camera_model = "zedonegs";
								zedx-id = "5";
								camera-sensors = <&zedxone_gs2>;
							};
				
							zedxone_uhd_ser2: zedxone_uhd_ser_2@44 {
								compatible = "stereolabs,sl_max9295";
								channel = "c";
								camera_model = "zedone4k";
								mode = "master";
								camera-sensors = <&zedxone_uhd2>;
								zedx-uhd-id = "2";
							};

							zedx_ser2:zedx_ser_2@62 {
								compatible = "stereolabs,sl_max9295";
								channel = "c";
								camera_model = "zedx";
								mode = "master";
								zedx-id = "4";
								camera-sensors = <&zedx_left2 &zedx_right2>;
							};
						};
						
						/* /dev/i2c-31/ */
						i2c@1 {
							reg = <1>;
							i2c-mux,deselect-on-exit;
							i2c-mux-idle-disconnect;
							#address-cells = <1>;
							#size-cells = <0>;
							//status = "okay";

							/* deserializer MAX9296 at address 0x48*/
							max9296_d@48 {
								compatible = "stereolabs,sl_max9296";
								reg = <0x48>;  /* deserializer i2c_address */
								channel = "d"; /* deserializer channel: one per deser */
								camera-serializers = <&zedx_ser3 &zedxone_gs_ser3 &zedxone_uhd_ser3>;
							};

							/* ZEDX 3 Left Cam*/
							zedx_left3:zedx_left_3@28 {
								status = "okay";
								def-addr = <0x28>;
								/* Define any required hw resources needed by driver */
								/* ie. clocks, io pins, power sources */
								clocks = <&bpmp TEGRA234_CLK_EXTPERIPH1>,
										<&bpmp TEGRA234_CLK_EXTPERIPH1>;
								clock-names = "extperiph1", "pllp_grtba";
								mclk = "extperiph1";
								channel = "d";   /* deserializer channel */
								zedx-id = "6";
								mode = "slave"; /* the master role is to initialize */
								/* all the serializers connected to the same */
								/* deserializer. -> one per ZEDX*/
								/* This master initializes the serializers */
								/* of ZEDX 0 and ZEDX 1. */
							};

							/* ZEDX 3 Right Cam*/
							zedx_right3:zedx_right_3@20 {
								status = "okay";
								def-addr = <0x20>;
								/* Define any required hw resources needed by driver */
								/* ie. clocks, io pins, power sources */
								clocks = <&bpmp TEGRA234_CLK_EXTPERIPH1>,
												<&bpmp TEGRA234_CLK_EXTPERIPH1>;
								clock-names = "extperiph1", "pllp_grtba";
								mclk = "extperiph1";
								channel = "d";  /* deserializer channel */
								zedx-id = "6";
								mode = "slave"; /* the serializer of the ZEDX 0 is already */
								/* initialized */
								eeprom-addr = <0x54>;
								has-eeprom;
							};

							/* ZEDX One GS 3 Cam*/
							zedxone_gs3: zedxone_gs_3@10 {
								status = "okay";
								/* Define any required hw resources needed by driver */
								/* ie. clocks, io pins, power sources */
								clocks = <&bpmp TEGRA234_CLK_EXTPERIPH1>,
										<&bpmp TEGRA234_CLK_EXTPERIPH1>;
								clock-names = "extperiph1", "pllp_grtba";
								mclk = "extperiph1";
								zedx-id = "7";
								channel = "d";   /* deserializer channel */
								mode = "slave"; /* the master role is to initialize */
										/* all the serializers connected to the same */
										/* deserializer. -> one per ZEDX*/
										/* This master initializes the serializers */
										/* of ZEDX 0 and ZEDX 1. */
								eeprom-addr = <0x56>;
								has-eeprom;
							};

							/*ZEDX One UHD 3 Cam*/
							zedxone_uhd3:zedxone_uhd_3@1a {
								/* Define any required hw resources needed by driver */
								/* ie. clocks, io pins, power sources */
								clocks = <&bpmp TEGRA234_CLK_EXTPERIPH1>,
										<&bpmp TEGRA234_CLK_EXTPERIPH1>;
								clock-names = "extperiph1", "pllp_grtba";
								mclk = "extperiph1";
								zedx-uhd-id = "3";
								channel = "d";
								mode = "slave";
								has-eeprom;
								eeprom-addr=<0x54>;
							};

							/* Serializers */
							zedxone_gs_ser3: zedxone_gs_ser_3@42 {
								compatible = "stereolabs,sl_max9295";
								channel = "d";
								mode = "master";
								camera_model = "zedonegs";
								zedx-id = "7";
								camera-sensors = <&zedxone_gs3>;
							};
				
							zedxone_uhd_ser3: zedxone_uhd_ser_3@44 {
								compatible = "stereolabs,sl_max9295";
								channel = "d";
								camera_model = "zedone4k";
								mode = "master";
								camera-sensors = <&zedxone_uhd3>;
								zedx-uhd-id = "3";
							};

							zedx_ser3:zedx_ser_3@62 {
								compatible = "stereolabs,sl_max9295";
								channel = "d";
								camera_model = "zedx";
								mode = "master";
								zedx-id = "6";
								camera-sensors = <&zedx_left3 &zedx_right3>;
							};
						};
					};
				};

				gpio@2200000 {
					status = "okay";
					camera-control-output-CAM2-high {
							status = "okay";
							gpio-hog;
							gpios = <CAM2_PWDN 0>;
							output-high;
							label = "cam2-pwdn";
					};
					camera-control-output-CAM3-high {
							status = "okay";
							gpio-hog;
							gpios = <CAM3_PWDN 0>;
							output-high;
							label = "cam3-pwdn";
					};
					camera-control-output-PWM-high {
							status = "okay";
							gpio-hog;
							gpios = <CAM_PWM 0>;
							output-high;
							label = "cam-pwm";
					};
				};
			};
		};
	};
};
